
#include "ch.h"
#include "hal.h"
#include "r2p/Middleware.hpp"
#include <r2p/msg/pixy.hpp>
#include <r2p/msg/proximity.hpp>


enum {UNSYNC,START,ONGOING,READY}sync = START;


bool flag_sync(char ch) {
	static char last_ch = 0x00;

		if (sync == READY) return true;

		switch (ch) {
		case 'ª':
			// SYNC ongoing, save last received character
			if (sync == START) {
				sync = ONGOING;
			}
			break;
		case 'U':
			// SYNC ongoing and last character is 0xAA -> SYNC completed
			if ((sync == ONGOING))
					{sync = READY;}
			// If SYNC ongoing, save last character, otherwise this is not a SYNC packet
			else {
				sync = UNSYNC;
			}
			break;
		default:
			sync = UNSYNC;
		}

		return false;
}
/*
bool sync(char temp[]) {
	char tocmp1='U';
	char tocmp2='ª';
	if(temp[0]==tocmp1 && temp[1]==tocmp2 && temp[2]==tocmp1 && temp[3]==tocmp2)
		{
		return true;
		}

		return false;
}*/

int toInt(char temp[]) {
	int first;
	int second;

	first = (int)temp[0];
	first = first *16 *16;
	second  = (int)temp[1];

	return first + second;
}


msg_t pixy_node(void *arg) {
	r2p::Publisher<r2p::PixyMsg> pixy_pub;

	r2p::Node node("pixy");
	r2p::PixyMsg * msgp;
	sdStart(&SD3, NULL);

	node.advertise(pixy_pub,"pixy");


	for (;;) {
		node.spin();
		char ch = sdGetTimeout(&SD3, MS2ST(100));
		if(flag_sync(ch)){

				char check_temp[2];
				check_temp[1]=sdGetTimeout(&SD3, MS2ST(100));
				check_temp[0]=sdGetTimeout(&SD3, MS2ST(100));

				char Sig_temp[2];
				Sig_temp[1]=sdGetTimeout(&SD3, MS2ST(100));
				Sig_temp[0]=sdGetTimeout(&SD3, MS2ST(100));

				char x_temp[2];
				x_temp[1]=sdGetTimeout(&SD3, MS2ST(100));
				x_temp[0]=sdGetTimeout(&SD3, MS2ST(100));

				char y_temp[2];
				y_temp[1]=sdGetTimeout(&SD3, MS2ST(100));
				y_temp[0]=sdGetTimeout(&SD3, MS2ST(100));

				char width_temp[2];
				width_temp[1]=sdGetTimeout(&SD3, MS2ST(100));
				width_temp[0]=sdGetTimeout(&SD3, MS2ST(100));

				char height_temp[2];
				height_temp[1]=sdGetTimeout(&SD3, MS2ST(100));
				height_temp[0]=sdGetTimeout(&SD3, MS2ST(100));

			if (pixy_pub.alloc(msgp)) {
				int check = toInt(check_temp);
				int sig = toInt(Sig_temp);
				int x = toInt(x_temp);
				int y = toInt(y_temp);
				int width = toInt(width_temp);
				int height = toInt(height_temp);
				msgp->checksum=check;
				msgp->signature=sig;
				msgp->x_center = x;
				msgp->y_center = y;
				msgp->width = width;
				msgp->height = height;
				pixy_pub.publish(*msgp);
			}
			sync = UNSYNC;
		}

		r2p::Thread::sleep(r2p::Time::ms(200));
	}

	return CH_SUCCESS;
}






