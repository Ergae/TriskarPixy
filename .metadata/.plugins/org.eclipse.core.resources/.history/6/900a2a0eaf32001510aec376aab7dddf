
#include "ch.h"
#include "hal.h"
#include "r2p/Middleware.hpp"
#include <r2p/msg/pixy.hpp>
#include <r2p/msg/proximity.hpp>



/*
 * UART driver configuration structure.
 */
/*
static UARTConfig uart_cfg_1 = {
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  19200,
  0,
  USART_CR2_LINEN,
  0
};
*/

int proximity_values[8] = {0};

bool proximity_cb(const r2p::ProximityMsg &msg) {

	for (int i = 0; i < 8; i++) {
		proximity_values[i] = msg.value[i];
	}

	return true;
}

msg_t pixy_node(void *arg) {
	r2p::Publisher<r2p::PixyMsg> pixy_pub;
	r2p::Subscriber<r2p::ProximityMsg, 5> proximity_sub(proximity_cb);
	r2p::Node node("pixy");
	r2p::PixyMsg * msgp;
	sdStart(&SD3, NULL);
    char buffer[12] ;
    char tocmp1='U';
    char tocmp2='Âª';

   	node.advertise(pixy_pub,"pixy");
   	node.subscribe(proximity_sub, "proximity");

	for (;;) {
		node.spin();
/*		uartStartReceive(&UARTD3,1,buffer);
		if(buffer[0]==tocmp1){
			uartStartReceive(&UARTD3,1,buffer);
			if(buffer[0]==tocmp2){
				uartStartReceive(&UARTD3,1,buffer);
				if(buffer[0]==tocmp1){
					uartStartReceive(&UARTD3,1,buffer);
					if(buffer[0]==tocmp2){
						uartStartReceive(&UARTD3,40,buffer);
*/
						char c1 = sdGetTimeout(&SD3, MS2ST(100));
						if (c1==tocmp1) {
							char c2 = sdGetTimeout(&SD3, MS2ST(100));
							if(c2==tocmp2)
							{
							char c1 = sdGetTimeout(&SD3, MS2ST(100));
								if (c1 == tocmp1) {
									char c2 = sdGetTimeout(&SD3, MS2ST(100));
										if(c2==tocmp2){
											for(int i =0;i<12;i++){
												char c1 = sdGetTimeout(&SD3, MS2ST(100));
												buffer[i]=c1;
											}
											if (pixy_pub.alloc(msgp)) {
												memcpy(msgp->buffer, buffer, 40);
												pixy_pub.publish(*msgp);
												}
										}
									}
							}

						}
						r2p::Thread::sleep(r2p::Time::ms(500));
/*
					}

				}

			}

		}
*/		r2p::Thread::sleep(r2p::Time::ms(500));
	}

	return CH_SUCCESS;
}
